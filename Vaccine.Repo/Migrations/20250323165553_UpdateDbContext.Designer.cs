// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vaccine.Repo.Entities;

#nullable disable

namespace Vaccine.Repo.Migrations
{
    [DbContext(typeof(VaccineDbContext))]
    [Migration("20250323165553_UpdateDbContext")]
    partial class UpdateDbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Vaccine.Repo.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("BloodType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("blood_type")
                        .IsFixedLength();

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_name");

                    b.HasKey("AdminId")
                        .HasName("PK__Admin__43AA41412325BEAC");

                    b.HasIndex(new[] { "UserName" }, "UQ__Admin__7C9273C419142EEB")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Admin__AB6E6164E5C92D16")
                        .IsUnique();

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("appointment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("appointment_date");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("batchNumber");

                    b.Property<int>("ChildId")
                        .HasColumnType("int")
                        .HasColumnName("child_id");

                    b.Property<int?>("ComboId")
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("status");

                    b.Property<int?>("VaccineId")
                        .HasColumnType("int")
                        .HasColumnName("vaccine_id");

                    b.Property<string>("VaccineType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("vaccine_type");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__A50828FCF69887E8");

                    b.HasIndex("BatchNumber");

                    b.HasIndex("ChildId");

                    b.HasIndex("ComboId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("StaffId");

                    b.HasIndex("VaccineId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Child", b =>
                {
                    b.Property<int>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("child_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChildId"));

                    b.Property<string>("BloodType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("blood_type")
                        .IsFixedLength();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("ChildId")
                        .HasName("PK__Child__015ADC05C293D48F");

                    b.HasIndex("CustomerId");

                    b.ToTable("Child", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("BloodType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("blood_type")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_name");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__CD65CB85E799178F");

                    b.HasIndex(new[] { "UserName" }, "UQ__Customer__7C9273C488BB26AE")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Customer__AB6E61641F332227")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Phone" }, "UQ__Customer__B43B145F7904B365")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Degree")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("degree");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int")
                        .HasColumnName("experience_years");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.HasKey("DoctorId")
                        .HasName("PK__Doctor__F399356456957BF5");

                    b.HasIndex(new[] { "Phone" }, "UQ__Doctor__B43B145F3F38322A")
                        .IsUnique();

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Feedback", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("VaccineId")
                        .HasColumnType("int")
                        .HasColumnName("vaccine_id");

                    b.HasKey("ReviewId")
                        .HasName("PK__Feedback__60883D90766CC40A");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("StaffId");

                    b.HasIndex("VaccineId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.HealthRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("appointment_id");

                    b.Property<bool?>("AteBeforeVaccine")
                        .HasColumnType("bit")
                        .HasColumnName("ate_before_vaccine");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("blood_pressure");

                    b.Property<bool?>("ConditionOk")
                        .HasColumnType("bit")
                        .HasColumnName("condition_ok");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<string>("HeartRate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("heart_rate");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("height");

                    b.Property<string>("ReactionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reaction_notes");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("temperature");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("weight");

                    b.HasKey("RecordId")
                        .HasName("PK__HealthRe__BFCFB4DD4AA89881");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("StaffId");

                    b.ToTable("HealthRecord", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Holiday", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("holiday_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<DateOnly>("DateFrom")
                        .HasColumnType("date")
                        .HasColumnName("date_from");

                    b.Property<DateOnly>("DateTo")
                        .HasColumnType("date")
                        .HasColumnName("date_to");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reason");

                    b.HasKey("HolidayId")
                        .HasName("PK__Holiday__253884EA6DBA9AD5");

                    b.HasIndex("AdminId");

                    b.ToTable("Holiday", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoice__F58DFD493CA53699");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.InvoiceDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("appointment_id");

                    b.Property<int?>("ComboId")
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("VaccineId")
                        .HasColumnType("int")
                        .HasColumnName("vaccine_id");

                    b.HasKey("DetailId")
                        .HasName("PK__InvoiceD__38E9A224183CAA31");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ComboId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("VaccineId");

                    b.ToTable("InvoiceDetail", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("Degree")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("degree");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int")
                        .HasColumnName("experience_years");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_name");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__1963DD9CF478652A");

                    b.HasIndex(new[] { "UserName" }, "UQ__Staff__7C9273C4DBD54384")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Staff__AB6E616411F382A9")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UQ__Staff__B43B145F9977ADF9")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Vaccine", b =>
                {
                    b.Property<int>("VaccineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vaccine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccineId"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("InternalDurationDoses")
                        .HasColumnType("int")
                        .HasColumnName("internal_duration_doses");

                    b.Property<int>("MaxLateDate")
                        .HasColumnType("int")
                        .HasColumnName("max_late_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("VaccineId")
                        .HasName("PK__Vaccine__B593EFB3591D646C");

                    b.ToTable("Vaccine", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.VaccineBatch", b =>
                {
                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("batch_number");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("country");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<DateOnly>("ManufactureDate")
                        .HasColumnType("date")
                        .HasColumnName("manufacture_date");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("BatchNumber")
                        .HasName("PK__VaccineB__56E378360CEC7A57");

                    b.ToTable("VaccineBatch", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.VaccineBatchDetail", b =>
                {
                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("batch_number");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int")
                        .HasColumnName("vaccine_id");

                    b.Property<int>("PreOrderQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("BatchNumber", "VaccineId")
                        .HasName("PK__VaccineB__7DBA46CD69A10EBA");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccineBatchDetail", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.VaccineCombo", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("ComboId")
                        .HasName("PK__VaccineC__18F74AA37256A032");

                    b.ToTable("VaccineCombo", (string)null);
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.VaccineComboDetail", b =>
                {
                    b.Property<int>("ComboId")
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int")
                        .HasColumnName("vaccine_id");

                    b.HasKey("ComboId", "VaccineId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccineComboDetail", (string)null);
                });

            modelBuilder.Entity("VaccineVaccineCombo", b =>
                {
                    b.Property<int>("CombosComboId")
                        .HasColumnType("int");

                    b.Property<int>("VaccinesVaccineId")
                        .HasColumnType("int");

                    b.HasKey("CombosComboId", "VaccinesVaccineId");

                    b.HasIndex("VaccinesVaccineId");

                    b.ToTable("VaccineVaccineCombo");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Appointment", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.VaccineBatch", "BatchNumberNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("BatchNumber")
                        .HasConstraintName("FK_Appointment_VaccineBatch");

                    b.HasOne("Vaccine.Repo.Entities.Child", "Child")
                        .WithMany("Appointments")
                        .HasForeignKey("ChildId")
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__child__0D7A0286");

                    b.HasOne("Vaccine.Repo.Entities.VaccineCombo", "Combo")
                        .WithMany("Appointments")
                        .HasForeignKey("ComboId")
                        .HasConstraintName("FK__Appointme__combo__114A936A");

                    b.HasOne("Vaccine.Repo.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__custo__0C85DE4D");

                    b.HasOne("Vaccine.Repo.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Appointment_Doctor");

                    b.HasOne("Vaccine.Repo.Entities.Staff", "Staff")
                        .WithMany("Appointments")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Appointment_Staff");

                    b.HasOne("Vaccine.Repo.Entities.Vaccine", "Vaccine")
                        .WithMany("Appointments")
                        .HasForeignKey("VaccineId")
                        .HasConstraintName("FK__Appointme__vacci__10566F31");

                    b.Navigation("BatchNumberNavigation");

                    b.Navigation("Child");

                    b.Navigation("Combo");

                    b.Navigation("Customer");

                    b.Navigation("Doctor");

                    b.Navigation("Staff");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Child", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.Customer", "Customer")
                        .WithMany("Children")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Child__customer___6383C8BA");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Feedback", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.Appointment", "Appointment")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__appoin__2BFE89A6");

                    b.HasOne("Vaccine.Repo.Entities.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__custom__2A164134");

                    b.HasOne("Vaccine.Repo.Entities.Doctor", "Doctor")
                        .WithMany("Feedbacks")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK__Feedback__doctor__2B0A656D");

                    b.HasOne("Vaccine.Repo.Entities.Staff", "Staff")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StaffId");

                    b.HasOne("Vaccine.Repo.Entities.Vaccine", "Vaccine")
                        .WithMany("Feedbacks")
                        .HasForeignKey("VaccineId");

                    b.Navigation("Appointment");

                    b.Navigation("Customer");

                    b.Navigation("Doctor");

                    b.Navigation("Staff");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.HealthRecord", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.Appointment", "Appointment")
                        .WithMany("HealthRecords")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK__HealthRec__appoi__236943A5");

                    b.HasOne("Vaccine.Repo.Entities.Doctor", "Doctor")
                        .WithMany("HealthRecords")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK__HealthRec__docto__245D67DE");

                    b.HasOne("Vaccine.Repo.Entities.Staff", "Staff")
                        .WithMany("HealthRecords")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK__HealthRec__staff__22751F6C");

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Holiday", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.Admin", "Admin")
                        .WithMany("Holidays")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK__Holiday__admin_i__2EDAF651");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Invoice", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Invoice__custome__17F790F9");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.Appointment", "Appointment")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__InvoiceDe__appoi__1DB06A4F");

                    b.HasOne("Vaccine.Repo.Entities.VaccineCombo", "Combo")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ComboId")
                        .HasConstraintName("FK__InvoiceDe__combo__1EA48E88");

                    b.HasOne("Vaccine.Repo.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK__InvoiceDe__invoi__1BC821DD");

                    b.HasOne("Vaccine.Repo.Entities.Vaccine", "Vaccine")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("VaccineId")
                        .HasConstraintName("FK__InvoiceDe__vacci__1CBC4616");

                    b.Navigation("Appointment");

                    b.Navigation("Combo");

                    b.Navigation("Invoice");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.VaccineBatchDetail", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.VaccineBatch", "BatchNumberNavigation")
                        .WithMany("VaccineBatchDetails")
                        .HasForeignKey("BatchNumber")
                        .IsRequired()
                        .HasConstraintName("FK__VaccineBa__batch__00200768");

                    b.HasOne("Vaccine.Repo.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccineBatchDetails")
                        .HasForeignKey("VaccineId")
                        .IsRequired()
                        .HasConstraintName("FK__VaccineBa__vacci__01142BA1");

                    b.Navigation("BatchNumberNavigation");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.VaccineComboDetail", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.VaccineCombo", "Combo")
                        .WithMany("VaccineComboDetails")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__VaccineCo__combo__05D8E0BE");

                    b.HasOne("Vaccine.Repo.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccineComboDetails")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__VaccineCo__vacci__06CD04F7");

                    b.Navigation("Combo");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaccineVaccineCombo", b =>
                {
                    b.HasOne("Vaccine.Repo.Entities.VaccineCombo", null)
                        .WithMany()
                        .HasForeignKey("CombosComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vaccine.Repo.Entities.Vaccine", null)
                        .WithMany()
                        .HasForeignKey("VaccinesVaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Admin", b =>
                {
                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Appointment", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("HealthRecords");

                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Child", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Children");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("HealthRecords");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Staff", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("HealthRecords");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.Vaccine", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("VaccineBatchDetails");

                    b.Navigation("VaccineComboDetails");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.VaccineBatch", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("VaccineBatchDetails");
                });

            modelBuilder.Entity("Vaccine.Repo.Entities.VaccineCombo", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("VaccineComboDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
